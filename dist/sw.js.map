{
  "version": 3,
  "sources": ["../src/sw.js"],
  "sourcesContent": ["// changing this file makes the browser update the active SW, and changing cacheName makes it re-cache all files\nconst cacheName = \"dsatools-v3\"\n\n// TODO: Automate cacheUrls\n\nconst cacheUrls = [\"/\", ...(\"items/ bpbin/ main.css main.js app.webmanifest lib/pica.js lib/zoomist.js lib/zoomist/css.css lib/dsabp-js.js\"\n\t+ \" https://x.dsatools.workers.dev?https://pub.drednot.io/test/econ/item_schema.json\").split(\" \")]\n\nfor (const p of (\"sw-reg.js goatc.js icomoon.woff header.html\"\n\t+ \" footer.html icons/64.webp icons/80m.webp icons/96.webp icons/144.webp icons/512.png\"\n\t+ \" autoInputSave.js\").split(\" \"))\n\tcacheUrls.push(\"assets/\" + p)\n\nfor (const p of (\" main.css main.js converter.js worker.js assets/bg_ship.png assets/color-palettes.json\").split(\" \"))\n\tcacheUrls.push(\"img2pixar/\" + p)\n\nfor (const p of (\" main.css main.js operations.js\").split(\" \"))\n\tcacheUrls.push(\"bpeditor/\" + p)\n\nconst fetchFirstList = new RegExp(`/item_schema\\\\.json$|^https://(test\\\\.)?drednot\\\\.io/|^${location.origin}/($|bpbin/\\\\w*|main\\\\.css)`)\nconst noCacheList = /\\/bpbin\\/\\w+|\\/\\/res.cloudinary.com\\//\n\nself.addEventListener(\"install\", e => {\n\te.waitUntil(\n\t\tcaches.open(cacheName).then(cache =>\n\t\t\tPromise.all(cacheUrls.map(url =>\n\t\t\t\tcache.add(url).catch(e => console.error(e.message, url))\n\t\t\t))\n\t\t)\n\t)\n\tself.skipWaiting()\n})\n\nself.addEventListener(\"fetch\", e => {\n\tif (e.request.method != \"GET\" || !e.request.url.startsWith(\"http\"))\n\t\treturn\n\te.respondWith(\n\t\t(async () => {\n\t\t\tconst cache = await caches.open(cacheName)\n\t\t\tconst fetchFirst = fetchFirstList.test(e.request.url)\n\t\t\tif (!fetchFirst) {\n\t\t\t\t// without .url, misses some random files\n\t\t\t\tconst cacheRes = await cache.match(e.request.url, { ignoreSearch: true })\n\t\t\t\tif (cacheRes) return cacheRes\n\t\t\t}\n\t\t\treturn fetch(e.request).then(res => {\n\t\t\t\tif (!noCacheList.test(e.request.url))\n\t\t\t\t\tcache.put(e.request.url.split(\"?\")[0], res.clone()) // firefox caches with params\n\t\t\t\treturn res\n\t\t\t}).catch(async () => {\n\t\t\t\tif (fetchFirst) {\n\t\t\t\t\tconst cacheRes = await cache.match(e.request.url, { ignoreSearch: true })\n\t\t\t\t\tif (cacheRes) return cacheRes\n\t\t\t\t}\n\t\t\t\treturn Response.error()\n\t\t\t})\n\t\t})()\n\t)\n})\n\nself.addEventListener(\"activate\", e => {\n\te.waitUntil(\n\t\tcaches.keys().then(keys =>\n\t\t\tPromise.all(\n\t\t\t\tkeys.reduce((arr, key) => (\n\t\t\t\t\tkey != cacheName && arr.push(caches.delete(key)), arr\n\t\t\t\t), [self.clients.claim()])\n\t\t\t)\n\t\t)\n\t)\n})\n"],
  "mappings": "AACA,IAAMA,EAAY,cAIZC,EAAY,CAAC,IAAK,GAAI,iMAC4D,MAAM,GAAG,CAAC,EAElG,QAAWC,IAAM,mJAEO,MAAM,GAAG,EAChCD,EAAU,KAAK,UAAYC,CAAC,EAE7B,QAAWA,IAAM,yFAA0F,MAAM,GAAG,EACnHD,EAAU,KAAK,aAAeC,CAAC,EAEhC,QAAWA,IAAM,kCAAmC,MAAM,GAAG,EAC5DD,EAAU,KAAK,YAAcC,CAAC,EAE/B,IAAMC,EAAiB,IAAI,OAAO,0DAA0D,SAAS,MAAM,4BAA4B,EACjIC,EAAc,wCAEpB,KAAK,iBAAiB,UAAWC,GAAK,CACrCA,EAAE,UACD,OAAO,KAAKL,CAAS,EAAE,KAAKM,GAC3B,QAAQ,IAAIL,EAAU,IAAIM,GACzBD,EAAM,IAAIC,CAAG,EAAE,MAAMF,GAAK,QAAQ,MAAMA,EAAE,QAASE,CAAG,CAAC,CACxD,CAAC,CACF,CACD,EACA,KAAK,YAAY,CAClB,CAAC,EAED,KAAK,iBAAiB,QAASF,GAAK,CAC/BA,EAAE,QAAQ,QAAU,OAAS,CAACA,EAAE,QAAQ,IAAI,WAAW,MAAM,GAEjEA,EAAE,aACA,SAAY,CACZ,IAAMC,EAAQ,MAAM,OAAO,KAAKN,CAAS,EACnCQ,EAAaL,EAAe,KAAKE,EAAE,QAAQ,GAAG,EACpD,GAAI,CAACG,EAAY,CAEhB,IAAMC,EAAW,MAAMH,EAAM,MAAMD,EAAE,QAAQ,IAAK,CAAE,aAAc,EAAK,CAAC,EACxE,GAAII,EAAU,OAAOA,CACtB,CACA,OAAO,MAAMJ,EAAE,OAAO,EAAE,KAAKK,IACvBN,EAAY,KAAKC,EAAE,QAAQ,GAAG,GAClCC,EAAM,IAAID,EAAE,QAAQ,IAAI,MAAM,GAAG,EAAE,CAAC,EAAGK,EAAI,MAAM,CAAC,EAC5CA,EACP,EAAE,MAAM,SAAY,CACpB,GAAIF,EAAY,CACf,IAAMC,EAAW,MAAMH,EAAM,MAAMD,EAAE,QAAQ,IAAK,CAAE,aAAc,EAAK,CAAC,EACxE,GAAII,EAAU,OAAOA,CACtB,CACA,OAAO,SAAS,MAAM,CACvB,CAAC,CACF,GAAG,CACJ,CACD,CAAC,EAED,KAAK,iBAAiB,WAAYJ,GAAK,CACtCA,EAAE,UACD,OAAO,KAAK,EAAE,KAAKM,GAClB,QAAQ,IACPA,EAAK,OAAO,CAACC,EAAKC,KACjBA,GAAOb,GAAaY,EAAI,KAAK,OAAO,OAAOC,CAAG,CAAC,EAAGD,GAChD,CAAC,KAAK,QAAQ,MAAM,CAAC,CAAC,CAC1B,CACD,CACD,CACD,CAAC",
  "names": ["cacheName", "cacheUrls", "p", "fetchFirstList", "noCacheList", "e", "cache", "url", "fetchFirst", "cacheRes", "res", "keys", "arr", "key"]
}
