{
  "version": 3,
  "sources": ["../../src/img2pixar/converter.js"],
  "sourcesContent": ["const paintMatchCache = {}\nlet palettes\n\nfetch(globalThis.toolPath + \"/assets/color-palettes.json\")\n\t.then(res => res.json())\n\t.then(json => palettes = json)\n\t.catch(console.error)\n\n/* setTimeout(() => {\n\tlet output = {}\n\tfor (const id in palettes.RGB) output[id] = xyzToLab(rgbToXyz(palettes.RGB[id]))\n\tconsole.info(JSON.stringify(output))\n}, 500) */\n\nglobalThis.img2pixar = async function (canvas, options) {\n\tif (!canvas) {\n\t\tif (!document) return // if no canvas, should be called from main thread\n\t\tcanvas = document.createElement(\"canvas\")\n\t}\n\tconst canvasCtx = canvas.getContext(\"2d\", { willReadFrequently: true })\n\tconst pixels = options.imageData.data\n\tconst pixelSize = options.pixelSize\n\tconst width = options.imageData.width\n\tconst height = options.imageData.height\n\tlet textureImage\n\n\tcanvas.width = width * pixelSize\n\tcanvas.height = height * pixelSize\n\tif (options.drawPaintId) canvasCtx.font = `${options.fontSize}px Verdana, Geneva, Tahoma, sans-serif`\n\tif (options.drawPaintTexture) {\n\t\ttextureImage = await loadImage(globalThis.toolPath + \"/assets/bg_ship.png\")\n\t}\n\n\tlet x = 0, y = 0\n\tfor (let i = 0; i < pixels.length; i += 4) {\n\t\tif (i != 0 && i / 4 % width == 0) {\n\t\t\ty += pixelSize\n\t\t\tx = 0\n\t\t}\n\n\t\tconst paintId = getClosestPaint(options.colorSpace, [pixels[i], pixels[i + 1], pixels[i + 2]])\n\t\tconst rgbPaintColor = palettes.RGB[paintId]\n\t\tconst cssColor = `rgb(${rgbPaintColor[0]}, ${rgbPaintColor[1]}, ${rgbPaintColor[2]})`\n\n\t\tif (textureImage) {\n\t\t\tcanvasCtx.drawImage(textureImage, x, y, pixelSize, pixelSize)\n\t\t\tcanvasCtx.fillStyle = cssColor\n\t\t\tcanvasCtx.globalCompositeOperation = \"multiply\"\n\t\t\tcanvasCtx.fillRect(x, y, pixelSize, pixelSize)\n\t\t\tcanvasCtx.globalCompositeOperation = \"source-over\"\n\t\t} else {\n\t\t\tcanvasCtx.fillStyle = cssColor\n\t\t\tcanvasCtx.fillRect(x, y, pixelSize, pixelSize)\n\t\t}\n\n\t\tif (options.drawPaintId) {\n\t\t\tcanvasCtx.fillStyle = isDarkColor(rgbPaintColor) ? \"white\" : \"black\"\n\t\t\tcanvasCtx.fillText(paintId, x, y + pixelSize - 2, pixelSize)\n\t\t}\n\t\tx += pixelSize\n\t}\n\treturn {\n\t\timageData: canvasCtx.getImageData(0, 0, canvas.width, canvas.height)\n\t}\n}\n\nasync function loadImage(url) {\n\treturn createImageBitmap(await (await fetch(url).catch(console.error)).blob())\n}\n\nfunction isDarkColor(rgb, cap = 128) {\n\treturn (0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]) < cap\n}\n\nfunction getClosestPaint(cspace, color) {\n\tlet palette, func\n\tif (cspace == \"CIE2000\")\n\t\tpalette = \"LAB\", func = deltaE2000, color = xyzToLab(rgbToXyz(color))\n\telse\n\t\tpalette = \"RGB\", func = euclideanDistance\n\tlet resultId, closestId\n\tconst colorText = color.join(\"\")\n\tif (!Object.hasOwn(paintMatchCache, palette)) {\n\t\tpaintMatchCache[palette] = {}\n\t}\n\tif (Object.hasOwn(paintMatchCache[palette], colorText)) {\n\t\tresultId = paintMatchCache[palette][colorText]\n\t} else {\n\t\tlet shortestDist = -1\n\t\tfor (const id in palettes[palette]) {\n\t\t\tconst c = palettes[palette][id]\n\t\t\tconst dist = func(color, c)\n\t\t\tif (shortestDist == -1 || dist < shortestDist) {\n\t\t\t\tshortestDist = dist\n\t\t\t\tresultId = id\n\t\t\t\tclosestId = id\n\t\t\t}\n\t\t}\n\t\tpaintMatchCache[palette][colorText] = closestId\n\t}\n\treturn resultId\n}\n\nfunction euclideanDistance(c1, c2) {\n\treturn Math.sqrt(Math.pow(c1[0] - c2[0], 2) + Math.pow(c1[1] - c2[1], 2) + Math.pow(c1[2] - c2[2], 2))\n}\n\n// credit https://github.com/hamada147/IsThisColourSimilar/blob/master/Colour.js#L252\nfunction deltaE2000(lab1, lab2) {\n\tconst rad2deg = rad => 360 * rad / (2 * Math.PI)\n\tconst deg2rad = deg => (2 * Math.PI * deg) / 360\n\tconst avgL = (lab1[0] + lab2[0]) / 2\n\tconst c1 = Math.sqrt(Math.pow(lab1[1], 2) + Math.pow(lab1[2], 2))\n\tconst c2 = Math.sqrt(Math.pow(lab2[1], 2) + Math.pow(lab2[2], 2))\n\tconst avgC = (c1 + c2) / 2\n\tconst g = (1 - Math.sqrt(Math.pow(avgC, 7) / (Math.pow(avgC, 7) + Math.pow(25, 7)))) / 2\n\tconst a1p = lab1[1] * (1 + g)\n\tconst a2p = lab2[1] * (1 + g)\n\tconst c1p = Math.sqrt(Math.pow(a1p, 2) + Math.pow(lab1[2], 2))\n\tconst c2p = Math.sqrt(Math.pow(a2p, 2) + Math.pow(lab2[2], 2))\n\tconst avgCp = (c1p + c2p) / 2\n\tlet h1p = rad2deg(Math.atan2(lab1[2], a1p))\n\tif (h1p < 0) h1p = h1p + 360\n\tlet h2p = rad2deg(Math.atan2(lab2[2], a2p))\n\tif (h2p < 0) h2p = h2p + 360\n\tconst avghp = Math.abs(h1p - h2p) > 180 ? (h1p + h2p + 360) / 2 : (h1p + h2p) / 2\n\tconst t = 1 - 0.17 * Math.cos(deg2rad(avghp - 30)) + 0.24 * Math.cos(deg2rad(2 * avghp)) + 0.32 * Math.cos(deg2rad(3 * avghp + 6)) - 0.2 * Math.cos(deg2rad(4 * avghp - 63))\n\tlet deltahp = h2p - h1p\n\tif (Math.abs(deltahp) > 180) {\n\t\tif (h2p <= h1p) deltahp += 360\n\t\telse deltahp -= 360\n\t}\n\tconst deltalp = lab2[0] - lab1[0]\n\tconst deltacp = c2p - c1p\n\tdeltahp = 2 * Math.sqrt(c1p * c2p) * Math.sin(deg2rad(deltahp) / 2)\n\tconst sl = 1 + ((0.015 * Math.pow(avgL - 50, 2)) / Math.sqrt(20 + Math.pow(avgL - 50, 2)))\n\tconst sc = 1 + 0.045 * avgCp\n\tconst sh = 1 + 0.015 * avgCp * t\n\tconst deltaro = 30 * Math.exp(-(Math.pow((avghp - 275) / 25, 2)))\n\tconst rc = 2 * Math.sqrt(Math.pow(avgCp, 7) / (Math.pow(avgCp, 7) + Math.pow(25, 7)))\n\tconst rt = -rc * Math.sin(2 * deg2rad(deltaro))\n\treturn Math.sqrt(Math.pow(deltalp / (1 * sl), 2) + Math.pow(deltacp / (1 * sc), 2) + Math.pow(deltahp / (1 * sh), 2) + rt * (deltacp / (1 * sc)) * (deltahp / (1 * sh)))\n}\n\nfunction rgbToXyz(rgb) {\n\tconst [r, g, b] = [...rgb].map(v => {\n\t\tv /= 255\n\t\treturn (v > 0.04045 ? Math.pow((v + 0.055) / 1.055, 2.4) : v / 12.92) * 100\n\t})\n\tconst x = 0.4124 * r + 0.3576 * g + 0.1805 * b\n\tconst y = 0.2126 * r + 0.7152 * g + 0.0722 * b\n\tconst z = 0.0193 * r + 0.1192 * g + 0.9505 * b\n\treturn [x, y, z]\n}\n\nconst D50 = [94.811, 100.000, 107.304]\nfunction xyzToLab(xyz) {\n\tconst [x, y, z] = [...xyz].map((v, i) => {\n\t\tv /= D50[i]\n\t\treturn v > 0.008856 ? Math.pow(v, 1 / 3) : 7.787 * v + 16 / 116\n\t})\n\tconst l = 116 * y - 16\n\tconst a = 500 * (x - y)\n\tconst b = 200 * (y - z)\n\treturn [l, a, b]\n}\n"],
  "mappings": "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",
  "names": ["paintMatchCache", "palettes", "res", "json", "canvas", "options", "canvasCtx", "pixels", "pixelSize", "width", "height", "textureImage", "loadImage", "x", "y", "i", "paintId", "getClosestPaint", "rgbPaintColor", "cssColor", "isDarkColor", "url", "rgb", "cap", "cspace", "color", "palette", "func", "deltaE2000", "xyzToLab", "rgbToXyz", "euclideanDistance", "resultId", "closestId", "colorText", "shortestDist", "id", "c", "dist", "c1", "c2", "lab1", "lab2", "rad2deg", "rad", "deg2rad", "deg", "avgL", "avgC", "g", "a1p", "a2p", "c1p", "c2p", "avgCp", "h1p", "h2p", "avghp", "t", "deltahp", "deltalp", "deltacp", "sl", "sc", "sh", "deltaro", "rt", "r", "b", "v", "z", "D50", "xyz", "l", "a"]
}
