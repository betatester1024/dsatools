{
  "version": 3,
  "sources": ["../../src/bpeditor/operations.js"],
  "sourcesContent": ["// eslint-disable-next-line\nimport { Blueprint, BuildBits, BuildCmd, ConfigCmd, Item, LoaderPoint, Shape } from \"dsabp-js\"\n\nconst shapeFlipMap = {\n\tH: new Map([\n\t\t[Shape.RAMP_DL, Shape.RAMP_DR],\n\t\t[Shape.RAMP_UL, Shape.RAMP_UR],\n\t\t[Shape.SLAB_L, Shape.SLAB_R],\n\t\t[Shape.HALF_RAMP_1_D, Shape.HALF_RAMP_1_DI],\n\t\t[Shape.HALF_RAMP_1_L, Shape.HALF_RAMP_1_RI],\n\t\t[Shape.HALF_RAMP_2_D, Shape.HALF_RAMP_2_DI],\n\t\t[Shape.HALF_RAMP_2_L, Shape.HALF_RAMP_2_RI],\n\t\t[Shape.HALF_RAMP_1_UI, Shape.HALF_RAMP_1_U],\n\t\t[Shape.HALF_RAMP_1_LI, Shape.HALF_RAMP_1_R],\n\t\t[Shape.HALF_RAMP_2_UI, Shape.HALF_RAMP_2_U],\n\t\t[Shape.HALF_RAMP_2_LI, Shape.HALF_RAMP_2_R],\n\t\t[Shape.HALF_RAMP_3_D, Shape.HALF_RAMP_3_DI],\n\t\t[Shape.HALF_RAMP_3_L, Shape.HALF_RAMP_3_RI],\n\t\t[Shape.HALF_RAMP_3_UI, Shape.HALF_RAMP_3_U],\n\t\t[Shape.HALF_RAMP_3_LI, Shape.HALF_RAMP_3_R],\n\t\t[Shape.QUARTER_DL, Shape.QUARTER_DR],\n\t\t[Shape.QUARTER_UL, Shape.QUARTER_UR],\n\t\t[Shape.QUARTER_RAMP_DL, Shape.QUARTER_RAMP_DR],\n\t\t[Shape.QUARTER_RAMP_UL, Shape.QUARTER_RAMP_UR],\n\t\t[Shape.BEVEL_DL, Shape.BEVEL_DR],\n\t\t[Shape.BEVEL_UL, Shape.BEVEL_UR]\n\t]),\n\tV: new Map([\n\t\t[Shape.RAMP_UR, Shape.RAMP_DR],\n\t\t[Shape.RAMP_UL, Shape.RAMP_DL],\n\t\t[Shape.SLAB_U, Shape.SLAB_D],\n\t\t[Shape.HALF_RAMP_1_R, Shape.HALF_RAMP_1_RI],\n\t\t[Shape.HALF_RAMP_2_R, Shape.HALF_RAMP_2_RI],\n\t\t[Shape.HALF_RAMP_1_UI, Shape.HALF_RAMP_1_D],\n\t\t[Shape.HALF_RAMP_1_DI, Shape.HALF_RAMP_1_U],\n\t\t[Shape.HALF_RAMP_1_LI, Shape.HALF_RAMP_1_L],\n\t\t[Shape.HALF_RAMP_2_UI, Shape.HALF_RAMP_2_D],\n\t\t[Shape.HALF_RAMP_2_DI, Shape.HALF_RAMP_2_U],\n\t\t[Shape.HALF_RAMP_2_LI, Shape.HALF_RAMP_2_L],\n\t\t[Shape.HALF_RAMP_3_R, Shape.HALF_RAMP_3_RI],\n\t\t[Shape.HALF_RAMP_3_L, Shape.HALF_RAMP_3_LI],\n\t\t[Shape.HALF_RAMP_3_UI, Shape.HALF_RAMP_3_D],\n\t\t[Shape.HALF_RAMP_3_DI, Shape.HALF_RAMP_3_U],\n\t\t[Shape.QUARTER_UR, Shape.QUARTER_DR],\n\t\t[Shape.QUARTER_UL, Shape.QUARTER_DL],\n\t\t[Shape.QUARTER_RAMP_DR, Shape.QUARTER_RAMP_UR],\n\t\t[Shape.QUARTER_RAMP_UL, Shape.QUARTER_RAMP_DL],\n\t\t[Shape.BEVEL_DR, Shape.BEVEL_UR],\n\t\t[Shape.BEVEL_UL, Shape.BEVEL_DL]\n\t])\n}\nconst loaderFlipMap = {\n\tH: new Map([\n\t\t[LoaderPoint.TOP_LEFT, LoaderPoint.TOP_RIGHT],\n\t\t[LoaderPoint.LEFT, LoaderPoint.RIGHT],\n\t\t[LoaderPoint.BOTTOM_LEFT, LoaderPoint.BOTTOM_RIGHT]\n\t]),\n\tV: new Map([\n\t\t[LoaderPoint.TOP_LEFT, LoaderPoint.BOTTOM_LEFT],\n\t\t[LoaderPoint.TOP, LoaderPoint.BOTTOM],\n\t\t[LoaderPoint.TOP_RIGHT, LoaderPoint.BOTTOM_RIGHT]\n\t])\n}\n\nfor (const D of [\"H\", \"V\"]) {\n\tfor (const [k, v] of shapeFlipMap[D])\n\t\tshapeFlipMap[D].set(v, k)\n\tfor (const [k, v] of loaderFlipMap[D])\n\t\tloaderFlipMap[D].set(v, k)\n}\n\n/**\n * @param {Blueprint} bp\n * @param {\"H\"|\"V\"} D direction\n */\nexport function flip(bp, D) {\n\tfor (const cmd of bp.commands) {\n\t\tif (cmd instanceof ConfigCmd) {\n\t\t\tif (cmd.loader?.pickupPoint != null)\n\t\t\t\tcmd.loader.pickupPoint = loaderFlipMap[D].get(cmd.loader.pickupPoint) ?? cmd.loader.pickupPoint\n\t\t\tif (cmd.loader?.dropPoint != null)\n\t\t\t\tcmd.loader.dropPoint = loaderFlipMap[D].get(cmd.loader.dropPoint) ?? cmd.loader.dropPoint\n\t\t\tif (cmd.pusher?.angle != null) {\n\t\t\t\tcmd.pusher.angle = (D == \"H\" ? 180 : 360) - cmd.pusher?.angle\n\t\t\t\tif (cmd.pusher.angle < 0)\n\t\t\t\t\tcmd.pusher.angle += 360\n\t\t\t}\n\t\t\tif (cmd.angle != null) {\n\t\t\t\tcmd.angle = (D == \"H\" ? 180 : 360) - cmd.angle\n\t\t\t\tif (cmd.angle < 0)\n\t\t\t\t\tcmd.angle += 360\n\t\t\t}\n\t\t} else if (cmd instanceof BuildCmd) {\n\t\t\tif (cmd.shape)\n\t\t\t\tcmd.shape = shapeFlipMap[D].get(cmd.shape) ?? cmd.shape\n\t\t\tif (D == \"H\") {\n\t\t\t\tif (cmd.bits) {\n\t\t\t\t\tcmd.bits = new BuildBits(cmd.bits.toString().split(\"\").reduce((r, c) => c + r))\n\t\t\t\t\tcmd.x += cmd.bits.size - 1\n\t\t\t\t}\n\t\t\t\tcmd.x = bp.width - cmd.x - 1\n\t\t\t} else if (D == \"V\") {\n\t\t\t\tcmd.y = bp.height - cmd.y - 1\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param {Blueprint} bp\n * @param {{delete: boolean, top: number, right: number, bottom: number, left: number}} options\n */\nexport function crop(bp, options) {\n\tconst pL = { x: options.left, y: options.bottom },\n\t\tpR = { x: bp.width - options.right - 1, y: bp.height - options.top - 1 }\n\n\tbp.commands = bp.commands.filter(cmd => {\n\t\tif (cmd instanceof ConfigCmd)\n\t\t\treturn true\n\n\t\tif (cmd instanceof BuildCmd) {\n\t\t\tif (cmd.bits && !cmd.bits.isOne()) {\n\t\t\t\tlet newX\n\t\t\t\tfor (const [i, bit] of cmd.bits.toArray().entries()) {\n\t\t\t\t\tif (bit != true) continue\n\t\t\t\t\tif (!isIn(cmd.x + i, cmd.y)) {\n\t\t\t\t\t\tif (newX == null)\n\t\t\t\t\t\t\tnewX = cmd.x + i\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tcmd.bits.clear(i)\n\t\t\t\t\tif (cmd.bits.isZero()) // became empty, remove the command\n\t\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tcmd.x = newX\n\t\t\t\tcmd.bits.trimLeadZeros()\n\t\t\t}\n\t\t\tif (isIn(cmd.x, cmd.y)) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif (options.delete) {\n\t\t\t\tcmd.x -= options.left\n\t\t\t\tcmd.y -= options.bottom\n\t\t\t}\n\t\t\treturn true\n\t\t}\n\t})\n\n\tif (options.delete) {\n\t\tbp.width -= options.right + options.left\n\t\tbp.height -= options.top + options.bottom\n\t}\n\tstripRedundantCfgCmds(bp)\n\n\tfunction isIn(x, y) {\n\t\tconst r = (x >= pL.x && x <= pR.x && y >= pL.y && y <= pR.y)\n\t\treturn options.delete ? !r : r\n\t}\n}\n\n/**\n * @param {Blueprint} bp\n * @param {number} angle\n */\nexport function rotate(bp, angle) {\n\tconst cX = bp.width / 2\n\tconst cY = bp.height / 2\n\tangle *= Math.PI / 180\n\tconst cos = Math.cos(angle)\n\tconst sin = Math.sin(angle)\n\n\tlet minX = Infinity, minY = Infinity\n\tlet maxX = 0, maxY = 0\n\n\texpandBuildBits(bp)\n\n\tfor (const cmd of bp.commands) {\n\t\tif (!(cmd instanceof BuildCmd)) continue\n\t\t[cmd.x, cmd.y] = rotateC(cmd.x, cmd.y)\n\t\tminX = Math.min(minX, cmd.x)\n\t\tminY = Math.min(minY, cmd.y)\n\t\tmaxX = Math.max(maxX, cmd.x)\n\t\tmaxY = Math.max(maxY, cmd.y)\n\t}\n\n\tfor (const cmd of bp.commands) {\n\t\tif (!(cmd instanceof BuildCmd)) continue\n\t\tcmd.x = cmd.x - minX\n\t\tcmd.y = cmd.y - minY\n\t}\n\n\tbp.width = Math.ceil((maxX - minX) + 1)\n\tbp.height = Math.ceil((maxY - minY) + 1)\n\n\tmakeBuildBits(bp)\n\n\tfunction rotateC(x, y) {\n\t\treturn [\n\t\t\ttoFixed(((x - cX) * cos) - ((y - cY) * sin) + cX),\n\t\t\ttoFixed(((x - cX) * sin) + ((y - cY) * cos) + cY)\n\t\t]\n\t}\n}\n\nfunction toFixed(n, digits = 10) {\n\tconst f = 10 ** digits\n\treturn Math.round(n * f) / f\n}\n\n/**\n * @param {Blueprint} bp\n * @param {{search: string[], replacement: string}} options\n * @returns {number} Replaced amount\n */\nexport function replace(bp, options) {\n\tconst { search, replacement } = options\n\tconst del = replacement == \"\"\n\tlet amount = 0\n\n\tconst searchItems = new Set(resolveItemInputs(search))\n\tconst doSearchAir = searchItems.has(Item.NULL)\n\n\tconst replacementItem = del ? Item.NULL\n\t\t: !isNaN(replacement) ? Item.getById(parseInt(replacement)) : resolveItemName(replacement)[0]\n\n\tif (replacementItem == null) return amount\n\n\tconst filled = new Set()\n\tlet i = bp.commands.length\n\twhile (i--) {\n\t\tconst cmd = bp.commands[i]\n\t\tif (!(cmd instanceof BuildCmd)) continue\n\n\t\tif (doSearchAir) {\n\t\t\tif (cmd.bits) {\n\t\t\t\tlet bitI = 0\n\t\t\t\tfor (const bit of cmd.bits) {\n\t\t\t\t\tif (bit) filled.add(`${cmd.x + bitI},${cmd.y}`)\n\t\t\t\t\t++bitI\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfilled.add(`${cmd.x},${cmd.y}`)\n\t\t\t}\n\t\t}\n\n\t\tif (searchItems.has(cmd.item)) {\n\t\t\tif (del) {\n\t\t\t\tbp.commands.splice(i, 1)\n\t\t\t} else {\n\t\t\t\tcmd.item = replacementItem\n\t\t\t\tif (!replacementItem.isBuildable)\n\t\t\t\t\tcmd.shape = undefined\n\t\t\t}\n\t\t\tamount += cmd.bits ? cmd.bits.toArray().filter(bit => bit).length : 1\n\t\t}\n\t}\n\n\tstripRedundantCfgCmds(bp)\n\n\tif (doSearchAir) {\n\t\texpandBuildBits(bp)\n\t\tfor (let x = 0; x < bp.width; x++) {\n\t\t\tfor (let y = 0; y < bp.height; y++) {\n\t\t\t\tif (!filled.has(`${x},${y}`)) {\n\t\t\t\t\tbp.commands.push(new BuildCmd({ x, y, item: replacementItem }))\n\t\t\t\t\t++amount\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmakeBuildBits(bp)\n\t}\n\n\treturn amount\n}\n\nfunction resolveItemInputs(inputs) {\n\tconst output = []\n\t/** @type {Set<\"block\"|\"buildable\"|\"nonbuildable\"|\"mac\"|\"bigmac\"|\"smallmac\"|\"hull\">} */\n\tconst categories = new Set()\n\n\tfor (const s of new Set(inputs)) {\n\t\tif (s == \"block\") categories.add(\"block\")\n\t\telse if (s == \"buildable\") categories.add(\"buildable\")\n\t\telse if (s == \"non-buildable\" || s == \"nonbuildable\") categories.add(\"nonbuildable\")\n\t\telse if (s == \"machine\") categories.add(\"mac\")\n\t\telse if (s == \"big machine\") categories.add(\"bigmac\")\n\t\telse if (s == \"1x1 machine\" || s == \"small machine\") categories.add(\"smallmac\")\n\t\telse if (s == \"hull mounted\" || s == \"hull-mounted\" || s == \"hull\") categories.add(\"hull\")\n\t\telse // not a category\n\t\t\t!isNaN(s) ? output.push(Item.getById(parseInt(s))) : output.push(...resolveItemName(s))\n\t}\n\n\t/** @param {Item} i */\n\tconst isBigMac = i => i.buildInfo?.[0]?.bounds.x > 1 || i.buildInfo?.[0]?.bounds.y > 1\n\n\tif (categories.size) {\n\t\tfor (const item of Item.getMap().values()) {\n\t\t\tif (categories.has(\"block\") && item.isBlock\n\t\t\t\t|| categories.has(\"buildable\") && item.isBuildable\n\t\t\t\t|| categories.has(\"nonbuildable\") && !item.isBuildable\n\t\t\t\t|| categories.has(\"mac\") && item.isBuildable && !item.isBlock\n\t\t\t\t|| categories.has(\"bigmac\") && item.isBuildable && !item.isBlock && isBigMac(item)\n\t\t\t\t|| categories.has(\"smallmac\") && item.isBuildable && !item.isBlock && !isBigMac(item)\n\t\t\t\t|| categories.has(\"hull\") && item.isBuildable && item.buildInfo?.[0]?.require_blocks?.[0].block.includes(\"HULL\")\n\t\t\t)\n\t\t\t\toutput.push(item)\n\t\t}\n\t}\n\treturn output\n}\n\n/** Item name to items */\nfunction resolveItemName(name) {\n\tif (name == \"air\")\n\t\treturn [Item.NULL]\n\n\tconst output = []\n\tfor (const item of Item.getMap().values()) {\n\t\tif (item.name.toLowerCase().includes(name))\n\t\t\toutput.push(item)\n\t}\n\treturn output\n}\n\n/**\n * Compresses all build commands to the smallest amount of BuildBits possible.\n * Meant to be used on a BP that has no BuildBits.\n * Made quickly. It could probably be much more efficient and clean.\n * @param {Blueprint} bp\n */\nfunction makeBuildBits(bp) {\n\tclass BuildCmdGroup {\n\t\t/** @type {ConfigCmd} */\n\t\tcfgCmd\n\t\t/** @type {Array<BuildCmd>} */\n\t\tcommands\n\t\tconstructor(cmd, cfgCmd) {\n\t\t\tthis.commands = [cmd]\n\t\t\tthis.cfgCmd = cfgCmd\n\t\t}\n\t\tget item() {\n\t\t\treturn this.commands[0]?.item\n\t\t}\n\t\tget shape() {\n\t\t\treturn this.commands[0]?.shape\n\t\t}\n\t}\n\n\t/** @type {Object<string, BuildCmdGroup[]>} */\n\tconst rows = {}\n\tlet currentCfg\n\tfor (const cmd of bp.commands) {\n\t\tif (cmd instanceof ConfigCmd) {\n\t\t\tcurrentCfg = cmd\n\t\t} else if (cmd instanceof BuildCmd) {\n\t\t\tif (!rows[cmd.y])\n\t\t\t\trows[cmd.y] = []\n\t\t\tconst existingGroup = findGroup(cmd)\n\t\t\tif (existingGroup)\n\t\t\t\texistingGroup.commands.push(cmd)\n\t\t\telse\n\t\t\t\trows[cmd.y].push(new BuildCmdGroup(cmd, currentCfg?.clone()))\n\t\t}\n\t}\n\n\tbp.commands.length = 0\n\tconst lastCommands = [] // used for cmd+build commands that need to be built last\n\tlet lastCfg, cfgCmdIndex, lastBlockIndex = 0\n\tconst rowsValues = Object.values(rows)\n\tfor (let i = rowsValues.length - 1; i >= 0; i--) { // loop in reverse so rcd start from top\n\t\tfor (const group of rowsValues[i]) {\n\t\t\tconst useLastCommands = group.item == Item.EXPANDO_BOX\n\t\t\tcfgCmdIndex = (useLastCommands ? lastCommands : bp.commands).length\n\n\t\t\tif (group.cfgCmd && !group.cfgCmd.equals(lastCfg)) {\n\t\t\t\tconst existingCfgCmdIndex = findExistingCfgCmdIndex(group.cfgCmd, useLastCommands)\n\t\t\t\tif (existingCfgCmdIndex > -1) {\n\t\t\t\t\tcfgCmdIndex = existingCfgCmdIndex\n\t\t\t\t} else {\n\t\t\t\t\tlastCfg = group.cfgCmd\n\t\t\t\t\tif (useLastCommands)\n\t\t\t\t\t\tlastCommands.push(group.cfgCmd)\n\t\t\t\t\telse\n\t\t\t\t\t\tbp.commands.push(group.cfgCmd)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgroup.commands.sort((a, b) => a.x - b.x) // sort x coord left to right\n\n\t\t\t/** @type {BuildCmd[][]} */\n\t\t\tconst chunks = [[]]\n\t\t\tfor (const cmd of group.commands) {\n\t\t\t\tif (cmd.x - chunks[chunks.length - 1]?.[0]?.x >= 63)\n\t\t\t\t\tchunks.push([])\n\t\t\t\tchunks[chunks.length - 1].push(cmd)\n\t\t\t}\n\t\t\tfor (const chunk of chunks) {\n\t\t\t\tconst mainCmd = chunk.shift()\n\t\t\t\tif (chunk.length) {\n\t\t\t\t\tmainCmd.bits = new BuildBits(\"1\")\n\t\t\t\t\tfor (const cmd of chunk)\n\t\t\t\t\t\tmainCmd.bits.set(Math.floor(cmd.x - mainCmd.x))\n\t\t\t\t}\n\t\t\t\t(useLastCommands ? lastCommands : bp.commands)\n\t\t\t\t\t.splice(mainCmd.item.isBlock ? lastBlockIndex++ : cfgCmdIndex + 1, 0, mainCmd)\n\t\t\t}\n\t\t}\n\t}\n\tbp.commands.push(...lastCommands)\n\n\t/** @param {BuildCmd} cmd */\n\tfunction findGroup(cmd) {\n\t\tfor (const group of rows[cmd.y]) {\n\t\t\tif ((Math.abs(group.commands[0].x % 1 - cmd.x % 1) / group.commands[0].x || 0) == 0\n\t\t\t\t&& group.item == cmd.item\n\t\t\t\t&& group.shape == cmd.shape\n\t\t\t\t&& ((group.cfgCmd && currentCfg) ? group.cfgCmd.equals(currentCfg) : true)\n\t\t\t)\n\t\t\t\treturn group\n\t\t}\n\t}\n\n\tfunction findExistingCfgCmdIndex(targetCmd, useLastCommands) {\n\t\tconst cmds = useLastCommands ? lastCommands : bp.commands\n\t\tfor (let i = cmds.length - 1; i >= 0; i--) {\n\t\t\tif (cmds[i] instanceof ConfigCmd && cmds[i].equals(targetCmd)) {\n\t\t\t\treturn i\n\t\t\t}\n\t\t}\n\t\treturn -1\n\t}\n}\n\nfunction expandBuildBits(bp) {\n\tlet i = bp.commands.length\n\twhile (i--) {\n\t\tconst cmd = bp.commands[i]\n\t\tif (!(cmd instanceof BuildCmd && cmd.bits && !cmd.bits.isOne())) continue\n\n\t\tbp.commands.splice(i, 1)\n\t\tlet setBitI = 0, bitI = 0\n\t\tfor (const bit of cmd.bits) {\n\t\t\tif (bit) {\n\t\t\t\tconst newCmd = new BuildCmd({ x: cmd.x + bitI, y: cmd.y, item: cmd.item, shape: cmd.shape })\n\t\t\t\tbp.commands.splice(i + setBitI, 0, newCmd)\n\t\t\t\t++setBitI\n\t\t\t}\n\t\t\t++bitI\n\t\t}\n\t}\n}\n\n/** @param {Blueprint} bp */\nfunction stripRedundantCfgCmds(bp) {\n\tconst cmds = bp.commands\n\tlet i = cmds.length\n\twhile (i--) {\n\t\tif (!(cmds[i] instanceof ConfigCmd)) continue\n\t\t// if previous is a cfg, delete previous (redundant adjacent)\n\t\tif (cmds[i - 1] instanceof ConfigCmd) cmds.splice(i - 1, 1)\n\t\t// if current is first item, delete current (redundant at end)\n\t\tif (i == cmds.length - 1) cmds.splice(i, 1)\n\t}\n}\n"],
  "mappings": "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",
  "names": ["BuildBits", "BuildCmd", "ConfigCmd", "Item", "LoaderPoint", "Shape", "shapeFlipMap", "loaderFlipMap", "D", "k", "v", "flip", "bp", "cmd", "r", "c", "crop", "options", "pL", "pR", "newX", "i", "bit", "isIn", "stripRedundantCfgCmds", "x", "y", "rotate", "angle", "cX", "cY", "cos", "sin", "minX", "minY", "maxX", "maxY", "expandBuildBits", "rotateC", "makeBuildBits", "toFixed", "n", "digits", "f", "replace", "search", "replacement", "del", "amount", "searchItems", "resolveItemInputs", "doSearchAir", "replacementItem", "resolveItemName", "filled", "bitI", "inputs", "output", "categories", "s", "isBigMac", "item", "name", "BuildCmdGroup", "cfgCmd", "rows", "currentCfg", "existingGroup", "findGroup", "lastCommands", "lastCfg", "cfgCmdIndex", "lastBlockIndex", "rowsValues", "group", "useLastCommands", "existingCfgCmdIndex", "findExistingCfgCmdIndex", "a", "b", "chunks", "chunk", "mainCmd", "targetCmd", "cmds", "setBitI", "newCmd"]
}
